Instructions for building SK8 1.1

0. General notes on the build procedure:

See the installation instructions that come with MCL 4.0 (for PowerPC) or
MCL 3.1 (for 68K) to make sure that any files that you need in your system
folder or elsewhere to run MCL are properly installed.

SK8 requires the Espy fonts to be installed on your system. We have
included a file named "Espy Family" which should be dropped on your System
Folder to install it.

SK8 has been developed in a research environment and has never been handed
over to Apple's production configuration management group for
manufacturing. The build procedure that is outlined here will work, but
there will be some evidence of the evolutionary path that the development
followed and some dead ends that were not pruned before this code was
archived. Here's some explanation of what you will find:

The SK8 development team used SourceServer for version control and
configuration management of the sources. A Lisp interface to SourceServer
was made part of the SK8 build, and the build process provides options for
updating sources from a SourceServer project database. The build procedure
reflects this history by presenting you with options to build a developer or
user version which includes or excludes the interface to SourceServer.

This document explains how to build SK8 from the source files that are on
the CDROM archive, and does not make use of the SourceServer interface, but
the interface will still be part of the developer version of the resulting
SK8 build.

1. Creating the build folder:

If you are building SK8 for the PowerPC, use MCL 4.0. If you are building
SK8 for 68K, use MCL 3.1.

Create your build folder. For the purposes of these instructions it will be
assumed to be named "SK8 1.1", but any name will do.

Copy into the folder the following files from the MCL installation: The MCL
application (MCL 4.0 or MCL 3.1) and the entire Library folder. For the
PowerPC version, you must also either copy the three files
pmcl-compiler-4.0, pmcl-kernel-4.0, and pmcl-library-4.0 in to the build
folder, or else place aliases to those files with the same names in the
Extensions folder of the System folder. You may wish to also copy the two
MCL Help files if you intend to be doing any work in Lisp.

Copy the SK8 sources into the build folder. If you have done this
correctly, the build folder will contain the following files and folders:


 FIles in SK8 1.1 folder:

   MCL 4.0 or MCL 3.1
   MCL Help (optional)
   MCL Help Map.pfsl or MCL Help Map.fasl (optional)
   pmcl-compiler-4.0 (PPC only)
   pmcl-kernel-4.0 (PPC only)
   pmcl-library-4.0 (PPC only)

   sk8-init.lisp
   sk8-load.lisp

 Folders in SK8 1.1 folder:

   Library

   Build Part 1
   SK8
   SourceServer Source

During the build process, an additional folder, named "SK8 Temporary Files"
will be created. This folder is used for temporary files and is emptied
automatically.

2. Running Part 1 of the build procedure:

Part 1 builds a version of MCL that is then used for the main part of the
SK8 build. It is a little less automated than Part 2.

 Step 1.

Launch the MCL application from the build folder.

Select File | Load File from the menu (or type command-Y), navigate to the
"Build Part 1" folder and select, the file "Create MCL for SK8 Build.lisp"
and double-click on it or click on the Load button.

A dialog will appear with button choices labeled "Developer", "User", and
"Cancel". Click on "Developer" this time, even if you intend to produce a User
build.

A dialog will appear asking you to "Enter a name for the saved image file"
with a text entry field that is initialized to something like "MCL 4.0 SK8
1.1". This will be the name of the file that is generated by this part of
the build. In less you have a reason to name the file differently, simply
click on the OK button to accept the default, otherwise edit the name and
then click OK.

This part of the build takes less than two minutes on a PowerMac 9500/132
if every file needs to be compiled. When the build is finished, MCL exits
to the finder, leaving you with two files, one with the name you gave for
the saved image file and one with same name appended by ".log" that
contains a log of the messages sent to the Listener window during the build.

 Step 2.

Repeat Step 1, this time specifying that you want a "Developer" or "User" build.
The Developer build produces an MCL image that includes the interface to
SourceServer and which can be used to build any of the SK8 Developer, Release
or Runtime verions. The User build produces an MCL image that does not include
the interface to SourceServer and that cannot be used to produce a Developer
version of SK8.

This step will rebuild the image from the already compiled files
that were created during Step 1, and insures that the resulting image does
not have anything extra in it that was needed only to compile the sources.
If Step 1 was run when the compiled files were not available, such as the
first time you build after copying the sources from CDROM, then Step 2 will
be much faster than Step 1.

That completes Part 1 of the SK8 build. You only have to repeat a Part 1
build if you change any of the files in the Build Part 1 folder or the
SourceServer Sources folder, or if you change the underlying MCL version.

3. Running Part 2 of the build procedure to produce a full SK8:

Part 2 uses the MCL image that was produced in Part 1 to build SK8 or a SK8
runtime image.

 Step 1

Launch the application file that was produced by Build Part 1, e.g., "MCL
4.0 SK8 1.1".

Select File | Load File from the menu (or type command-Y), navigate to the
build folder if you need to and select, the file "sk8-init.lisp" and
double-click on it or click on the Load button.

A dialog will appear. There will be a text edit field that contains the
default version for the SK8 image you are building, "1.1 PPC" or "1.1 68K".
You can edit this if you want, or accept the default. The result of the
build will be a named "SK8" followed by the contents of that text edit
field, and a log file with the same name followed by ".log". There are also
several check boxes and radio buttons in the dialog. The default settings
are the proper ones for building the SK8 image, but here is an explanation
of each of them:

  Update all projects  -  This can only be used with the SourceServer
version control interface, which is not documented in this instruction
file. Leave it unchecked.

  Recompile Everything -  If this box is not checked, then the build
process will check internal time/version stamps in each object file to see
if it was compiled from the existing copy of the source file, and will not
recompile any file that is in synch. Checking the box will force all files
to be recompiled. You would want to recompile everything if you have
changed the definition of a macro in one file that could affect compilation
of other files, if you are using a new version of MCL, or if you have fixed
a bug in the MCL compiler. Normally you would leave this box unchecked for
the fastest build speed.

 Save when done - If this box is checked, then the SK8 application file is
written out at the end of the build process and the build exits to the
Finder. You would only want to uncheck this box if you need to prevent the
exit to Finder to debug the build process.

 Produce log file - A log of files loaded, compiled, and compiler warnings
is written to a text file if this box is checked, which is the default.

 Runtime/Release/Development - These are radio buttons, i.e., you can only
choose one of them. Development, causes the build to produce a
full SK8 application. Release produces a full SK8 without the MCL development
environment and some utilities that the SK8 development team used for
generating documentation and some other development activities.

IMPORTANT: The Development build of SK8 includes the Lisp development
environment of MCL. If you make a Development build of SK8, your use of it is
subject to the terms of the license agreement you have with Digitool for the
use of your copy of MCL. You may only give Release or Runtime versions of SK8
to people who do not already have a legitimate licensed copy of MCL.

Runtime causes the build to produce a runtime image, which is described a little
later in this document.

The first time you build SK8, every file needs to be compiled to object
form. The resulting object files have the extension "pfsl" on the PowerPC
and "fasl" on 68K. This stage of the build takes about 20 minutes on a PPC
9500/132.

 Step 2

Repeat Step 1. The build process should not recompile the files, instead
just loading the object files created by Step 1. This step takes about 5
minutes on a PPC 9500/132. Like the repetition in Part 1, this produces an
application image that is free from leftovers of the compilation process.

4. Running Part 2 of the build procedure to produce a runtime version of SK8:

Repeat Step 1 of the previous section's instructions, but this time select
the Runtime radio button. This will produce a file named "SK8 runtime1.1
PPC" or "SK8 runtime1.1 68K" (if you use the default version names).
Because the files were already compiled in the previous steps, there is no
need to do this step twice.

5. Creating the SK8 development folder:

The environment you need for developing SK8 applications is a folder that
contains the files in the SK8 build folder after the final build step is
completed except for the files SK8-init.lisp, SK8-load.lisp, and the folder
named "SK8". You can either move those somewhere else, or copy everything
except them from the SK8 build folder to another folder that you will be
using for SK8 development.

